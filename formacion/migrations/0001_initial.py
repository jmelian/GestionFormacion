# Generated by Django 5.2.3 on 2025-07-04 14:01

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Proveedor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre del proveedor de formación.', max_length=200, unique=True)),
                ('email', models.EmailField(blank=True, help_text='Correo electrónico de contacto del proveedor.', max_length=254, null=True)),
                ('telefono', models.CharField(blank=True, help_text='Número de teléfono de contacto del proveedor.', max_length=20, null=True)),
                ('direccion', models.TextField(blank=True, help_text='Dirección física del proveedor.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Proveedor',
                'verbose_name_plural': 'Proveedores',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Empleado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('dni', models.CharField(blank=True, help_text='Número de identificación del empleado.', max_length=20, null=True, unique=True)),
                ('sexo', models.CharField(blank=True, choices=[('masculino', 'Masculino'), ('femenino', 'Femenino'), ('otro', 'Otro')], help_text='Género del empleado.', max_length=20, null=True)),
                ('sede', models.CharField(blank=True, choices=[('tenerife', 'Tenerife'), ('gran_canaria', 'Gran Canaria')], help_text='Sede principal de trabajo del empleado.', max_length=50, null=True)),
                ('estado', models.CharField(choices=[('activo', 'Activo'), ('baja_temporal', 'Baja Temporal'), ('baja_definitiva', 'Baja Definitiva'), ('vacaciones', 'Vacaciones')], default='activo', help_text='Estado actual del empleado en la empresa.', max_length=50)),
                ('es_empleado_activo', models.BooleanField(default=True, help_text='Indica si el empleado está actualmente activo en la empresa (para filtros rápidos).')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Empleado',
                'verbose_name_plural': 'Empleados',
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Departamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre del departamento de la organización.', max_length=100, unique=True)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción detallada del departamento.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('coordinador', models.ForeignKey(blank=True, help_text='Empleado que coordina este departamento.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='departamentos_coordinados', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Departamento',
                'verbose_name_plural': 'Departamentos',
                'ordering': ['nombre'],
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre del área dentro de un departamento.', max_length=100)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción detallada del área.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('departamento', models.ForeignKey(help_text='Departamento al que pertenece esta área.', on_delete=django.db.models.deletion.CASCADE, related_name='areas', to='formacion.departamento')),
            ],
            options={
                'verbose_name': 'Área',
                'verbose_name_plural': 'Áreas',
                'ordering': ['departamento__nombre', 'nombre'],
                'unique_together': {('nombre', 'departamento')},
            },
        ),
        migrations.CreateModel(
            name='Notificacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mensaje', models.TextField(help_text='Contenido del mensaje de notificación.')),
                ('leida', models.BooleanField(default=False, help_text='Indica si la notificación ha sido leída por el usuario.')),
                ('fecha', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de creación de la notificación.')),
                ('tipo', models.CharField(choices=[('info', 'Información'), ('success', 'Éxito'), ('warning', 'Advertencia'), ('error', 'Error')], default='info', help_text="Tipo de notificación (ej. 'success', 'info', 'warning', 'error').", max_length=20)),
                ('usuario', models.ForeignKey(help_text='Usuario que recibe la notificación.', on_delete=django.db.models.deletion.CASCADE, related_name='notificaciones', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notificación',
                'verbose_name_plural': 'Notificaciones',
                'ordering': ['-fecha', 'leida'],
            },
        ),
        migrations.CreateModel(
            name='Proyecto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre del proyecto o iniciativa de formación.', max_length=200)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción detallada del proyecto.', null=True)),
                ('estado', models.CharField(choices=[('planificado', 'Planificado'), ('en_curso', 'En Curso'), ('completado', 'Completado'), ('cancelado', 'Cancelado')], default='planificado', help_text='Estado actual del proyecto.', max_length=50)),
                ('fecha_inicio', models.DateField(blank=True, help_text='Fecha de inicio del proyecto.', null=True)),
                ('fecha_fin_prevista', models.DateField(blank=True, help_text='Fecha de fin prevista del proyecto.', null=True)),
                ('fecha_fin_real', models.DateField(blank=True, help_text='Fecha de finalización real del proyecto.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('jefe_proyecto', models.ForeignKey(blank=True, help_text='Empleado responsable del proyecto.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proyectos_liderados', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Proyecto',
                'verbose_name_plural': 'Proyectos',
                'ordering': ['fecha_inicio', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='Curso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo', models.CharField(blank=True, help_text='Código único del curso (ej. INTRO-2023-001).', max_length=50, null=True, unique=True)),
                ('nombre', models.CharField(help_text='Nombre completo del curso.', max_length=200)),
                ('contenido', models.TextField(blank=True, help_text='Descripción detallada del contenido del curso.', null=True)),
                ('tipo', models.CharField(choices=[('onboarding', 'Onboarding'), ('refuerzo', 'Refuerzo'), ('tecnico', 'Técnico'), ('idiomas', 'Idiomas'), ('habilidades_blandas', 'Soft skills'), ('cumplimiento_seguridad', 'Cumplimiento y Seguridad'), ('otro', 'Otro')], default='otro', help_text='Tipo de formación que imparte el curso.', max_length=50)),
                ('resultado_formal', models.CharField(choices=[('academico', 'Título Académico (MECES)'), ('certificacion_profesional', 'Certificación Profesional Externa'), ('certificado_interno', 'Certificado/Diploma de Asistencia Interno'), ('no_aplica', 'Sin Reconocimiento Formal')], default='no_aplica', help_text='Tipo de reconocimiento formal que se obtiene al finalizar el curso.', max_length=50)),
                ('modalidad', models.CharField(choices=[('presencial', 'Presencial'), ('online', 'Online'), ('mixta', 'Mixta')], default='presencial', help_text='Modalidad de impartición del curso.', max_length=20)),
                ('duracion_horas', models.DecimalField(blank=True, decimal_places=2, help_text='Duración total del curso en horas.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('fecha_inicio', models.DateField(blank=True, help_text='Fecha de inicio de la edición actual del curso.', null=True)),
                ('fecha_fin', models.DateField(blank=True, help_text='Fecha de fin de la edición actual del curso.', null=True)),
                ('plazas_totales', models.PositiveIntegerField(default=0, help_text='Número total de plazas disponibles en el curso.')),
                ('plazas_disponibles', models.PositiveIntegerField(default=0, help_text='Número de plazas aún disponibles para inscripción. Se actualiza automáticamente.')),
                ('observaciones', models.TextField(blank=True, help_text='Notas o comentarios adicionales sobre el curso.', null=True)),
                ('costo', models.DecimalField(decimal_places=2, default=0.0, help_text='Costo total del curso por participante, si aplica.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('externo', models.BooleanField(default=False, help_text='Indica si el curso es impartido por un proveedor externo.')),
                ('origen', models.CharField(choices=[('interno', 'Interno (desarrollado por la empresa)'), ('externo', 'Externo (contratado a un proveedor)')], default='interno', help_text='Indica si el curso es interno o externo a la organización.', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('departamento_solicitante', models.ForeignKey(blank=True, help_text='Departamento que solicitó o al que va dirigido principalmente este curso.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cursos_solicitados', to='formacion.departamento')),
                ('proveedor', models.ForeignKey(blank=True, help_text='Proveedor externo que imparte el curso.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cursos_ofrecidos', to='formacion.proveedor')),
                ('proyecto', models.ForeignKey(blank=True, help_text='Proyecto de formación al que se asocia este curso.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cursos_asociados', to='formacion.proyecto')),
            ],
            options={
                'verbose_name': 'Curso',
                'verbose_name_plural': 'Cursos',
                'ordering': ['fecha_inicio', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='PuestoDeTrabajo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre del puesto de trabajo.', max_length=100, unique=True)),
                ('codigo', models.CharField(blank=True, help_text='Código identificador único del puesto.', max_length=20, null=True, unique=True)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción de las responsabilidades y requisitos del puesto.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('area', models.ForeignKey(blank=True, help_text='Área a la que pertenece este puesto de trabajo.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='puestos_de_trabajo', to='formacion.area')),
            ],
            options={
                'verbose_name': 'Puesto de Trabajo',
                'verbose_name_plural': 'Puestos de Trabajo',
                'ordering': ['nombre'],
            },
        ),
        migrations.AddField(
            model_name='empleado',
            name='puesto',
            field=models.ForeignKey(blank=True, help_text='Puesto de trabajo oficial asignado a este empleado.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='empleados_asignados', to='formacion.puestodetrabajo'),
        ),
        migrations.CreateModel(
            name='Participacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado', models.CharField(choices=[('pendiente', 'Pendiente de Confirmación'), ('confirmado', 'Confirmado'), ('asistido', 'Asistido'), ('aprobado', 'Aprobado'), ('suspendido', 'Suspendido'), ('cancelado', 'Cancelado'), ('completado', 'Completado (Aprobado y Certificado)')], default='pendiente', help_text='Estado actual de la participación del empleado en el curso.', max_length=50)),
                ('nota_final', models.DecimalField(blank=True, decimal_places=2, help_text='Calificación final obtenida por el empleado en el curso (si aplica).', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('validado', models.BooleanField(default=False, help_text='Indica si la participación y resultados han sido validados por RRHH.')),
                ('certificado_obtenido', models.BooleanField(default=False, help_text='Indica si el empleado ha obtenido el certificado/título del curso.')),
                ('fecha_certificado', models.DateField(blank=True, help_text='Fecha de obtención del certificado.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Fecha y hora de creación de la participación (puede usarse como fecha de inscripción inicial).')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('curso', models.ForeignKey(help_text='Curso en el que participa el empleado.', on_delete=django.db.models.deletion.CASCADE, related_name='participantes', to='formacion.curso')),
                ('empleado', models.ForeignKey(help_text='Empleado que participa en el curso.', on_delete=django.db.models.deletion.CASCADE, related_name='participaciones', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Participación',
                'verbose_name_plural': 'Participaciones',
                'ordering': ['created_at', 'empleado'],
                'unique_together': {('empleado', 'curso')},
            },
        ),
        migrations.CreateModel(
            name='Preseleccion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prioridad', models.IntegerField(help_text='Prioridad de la preselección (1: máxima, 5: mínima).', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('observaciones', models.TextField(blank=True, help_text='Observaciones del coordinador sobre la preselección.', null=True)),
                ('fecha', models.DateField(auto_now_add=True, help_text='Fecha de la preselección.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creado_por', models.ForeignKey(blank=True, help_text='Coordinador que realizó la preselección.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='preselecciones_creadas', to=settings.AUTH_USER_MODEL)),
                ('curso', models.ForeignKey(help_text='Curso para el que el empleado ha sido preseleccionado.', on_delete=django.db.models.deletion.CASCADE, related_name='preseleccionados', to='formacion.curso')),
                ('empleado', models.ForeignKey(help_text='Empleado preseleccionado para el curso.', on_delete=django.db.models.deletion.CASCADE, related_name='preselecciones', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Preselección',
                'verbose_name_plural': 'Preselecciones',
                'ordering': ['prioridad', 'fecha'],
                'unique_together': {('curso', 'empleado')},
            },
        ),
        migrations.CreateModel(
            name='RequisitoPuestoFormacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('periodicidad', models.CharField(choices=[('una_vez', 'Una vez'), ('anual', 'Anual'), ('bienal', 'Bienal'), ('trienal', 'Trienal'), ('cada_5_anos', 'Cada 5 años')], default='una_vez', help_text='Periodicidad con la que se requiere este curso para el puesto.', max_length=50)),
                ('obligatorio', models.BooleanField(default=True, help_text='Indica si el curso es de cumplimiento obligatorio para el puesto.')),
                ('observaciones', models.TextField(blank=True, help_text='Observaciones adicionales sobre el requisito.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('curso', models.ForeignKey(help_text='Curso que es un requisito para el puesto.', on_delete=django.db.models.deletion.CASCADE, related_name='requisitos_puesto', to='formacion.curso')),
                ('puesto', models.ForeignKey(help_text='Puesto de trabajo al que se aplica este requisito de formación.', on_delete=django.db.models.deletion.CASCADE, related_name='requisitos_formacion', to='formacion.puestodetrabajo')),
            ],
            options={
                'verbose_name': 'Requisito de Formación por Puesto',
                'verbose_name_plural': 'Requisitos de Formación por Puesto',
                'ordering': ['puesto__nombre', 'curso__nombre'],
                'unique_together': {('puesto', 'curso')},
            },
        ),
        migrations.CreateModel(
            name='Titulacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre oficial de la titulación, grado, certificación o curso.', max_length=255)),
                ('tipo_titulacion', models.CharField(choices=[('grado', 'Grado Universitario'), ('master', 'Máster Universitario'), ('doctorado', 'Doctorado'), ('fp', 'Formación Profesional'), ('curso_especializado', 'Curso Especializado'), ('certificacion', 'Certificación Profesional'), ('idioma', 'Idioma'), ('otro', 'Otro')], default='otro', help_text='Tipo de cualificación académica o profesional.', max_length=50)),
                ('institucion_emisora', models.CharField(blank=True, help_text='Institución o entidad que emitió la titulación.', max_length=255, null=True)),
                ('fecha_obtencion', models.DateField(help_text='Fecha en que la titulación fue obtenida.')),
                ('fecha_caducidad', models.DateField(blank=True, help_text='Fecha de caducidad de la titulación, si aplica (ej. certificaciones).', null=True)),
                ('area_conocimiento', models.CharField(blank=True, help_text='Área de conocimiento principal de la titulación.', max_length=100, null=True)),
                ('documento_adjunto', models.FileField(blank=True, help_text='Documento de soporte de la titulación (ej. certificado, diploma).', null=True, upload_to='titulaciones/')),
                ('validado_rrhh', models.BooleanField(default=False, help_text='Indica si la titulación ha sido validada por el departamento de RRHH.')),
                ('nivel_idioma', models.CharField(blank=True, choices=[('a1', 'A1 - Básico'), ('a2', 'A2 - Pre-intermedio'), ('b1', 'B1 - Intermedio'), ('b2', 'B2 - Intermedio Alto'), ('c1', 'C1 - Avanzado'), ('c2', 'C2 - Maestría'), ('nativo', 'Nativo')], help_text='Nivel del idioma obtenido, según marco común europeo (si aplica a titulaciones de idioma).', max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('curso_relacionado', models.ForeignKey(blank=True, help_text='Curso interno de la empresa al que está relacionada esta titulación (si aplica).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='titulaciones_emitidas', to='formacion.curso')),
                ('empleado', models.ForeignKey(help_text='Empleado que posee esta titulación.', on_delete=django.db.models.deletion.CASCADE, related_name='titulaciones', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Titulación/Certificación',
                'verbose_name_plural': 'Titulaciones/Certificaciones',
                'ordering': ['-fecha_obtencion', 'empleado'],
                'unique_together': {('empleado', 'nombre', 'institucion_emisora', 'fecha_obtencion')},
            },
        ),
    ]
